pointer_names = []

pointer = [
    append pointer_names $arg1

    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        varying vec2 texcoord0;
        varying vec4 colorscale;
        uniform vec2 smoothfactor;

        @arg2

        fragdata(0) vec4 fragcolor;

        @arg3

        void main()
        {
            vec2 coord = texcoord0 * 2.0 - 1.0;
            vec4 outcolor = vec4(0.0);

            @arg4

            fragcolor = outcolor * colorscale;
        }
    ] 1
]

pointer "plus" [
    const vec3 dims = vec3(0.25, 0.95, 0.15);
] [
    @(sdf_oriented_box)
] [
    float b1 = sdf_oriented_box(coord, vec2(0.0, dims.x), vec2(0.0, dims.y), dims.z);
    float b2 = sdf_oriented_box(coord, vec2(0.0, -dims.x), vec2(0.0, -dims.y), dims.z);
    float b3 = sdf_oriented_box(coord, vec2(dims.x, 0.0), vec2(dims.y, 0.0), dims.z);
    float b4 = sdf_oriented_box(coord, vec2(-dims.x, 0.0), vec2(-dims.y, 0.0), dims.z);

    float outval = min(min(b1, b2), min(b3, b4));
    if(outval > 0.0) discard;

    outcolor = vec4(vec3(smoothstep(0.0, smoothfactor.x, abs(outval))), smoothstep(0.0, smoothfactor.y, abs(outval)));
]

pointer "cross" [
    const vec3 dims = vec3(0.25, 0.95, 0.15);
] [
    @(sdf_oriented_box)
] [
    float b1 = sdf_oriented_box(coord, vec2(-dims.x, dims.x), vec2(-dims.y, dims.y), dims.z);
    float b2 = sdf_oriented_box(coord, vec2(-dims.x, -dims.x), vec2(-dims.y, -dims.y), dims.z);
    float b3 = sdf_oriented_box(coord, vec2(dims.x, dims.x), vec2(dims.y, dims.y), dims.z);
    float b4 = sdf_oriented_box(coord, vec2(dims.x, -dims.x), vec2(dims.y, -dims.y), dims.z);

    float outval = min(min(b1, b2), min(b3, b4));
    if(outval > 0.0) discard;

    outcolor = vec4(vec3(smoothstep(0.0, smoothfactor.x, abs(outval))), smoothstep(0.0, smoothfactor.y, abs(outval)));
]

pointer "dot" [
    const float radius = 0.1;
] [
    @(sdf_circle)
] [
    float outval = sdf_circle(coord, radius);
    if(outval > 0.0) discard;

    outcolor = vec4(vec3(smoothstep(0.0, smoothfactor.x, abs(outval))), smoothstep(0.0, smoothfactor.y, abs(outval)));
]

pointer "circle" [
    const float radius = 0.1;
    const vec2 dims = vec2(0.9, 0.1);
] [
    @(sdf_circle)
] [
    float b1 = sdf_circle(coord, radius);
    float b2 = abs(sdf_circle(coord, dims.x)) - dims.y;

    float outval = min(b1, b2);
    if(outval > 0.0) discard;

    outcolor = vec4(vec3(smoothstep(0.0, smoothfactor.x, abs(outval))), smoothstep(0.0, smoothfactor.y, abs(outval)));
]

defsvar newcrosshairname "plus"
deffvar newcrosshairblend 0.0 1.0 1.0
deffvar newcrosshairsmoothcolour 0.0 0.1 1.0
deffvar newcrosshairsmoothblend 0.0 0.075 1.0

pointer_cursor = [
    local _cursor

    _cursor = (? $uigetinteractive $cursorhovertex $cursortex)
    uiimage $_cursor 0xFFFFFF 0 $cursorsize $cursorsize [
        uicolourblend $cursorblend
    ]
]

pointer_crosshair = [
    local _crosshair

    _crosshair = $newcrosshairname
    if (< (listfind key $pointer_names [>= (strstr $key $_crosshair) 0]) 0) [
        _crosshair = "plus"
    ]

    uirender $_crosshair $crosshairsize $crosshairsize [
        uirenderparam smoothfactor $newcrosshairsmoothcolour $newcrosshairsmoothblend
        uicolourblend $newcrosshairblend
    ]
]

newui "pointer" $SURFACE_FOREGROUND [
    uiwinstyle (? (getinput 1 1) $WINSTYLE_CURSOR $WINSTYLE_CROSSHAIR)

    case $uiwinstyle $WINSTYLE_CURSOR [
        pointer_cursor
    ] $WINSTYLE_CROSSHAIR [
        if (&& (! $hidecrosshair) (= (getclientstate $focusedplayer) $CS_ALIVE)) [
            pointer_crosshair
        ]
    ]
]
