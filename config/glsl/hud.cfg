///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader $SHADER_DEFAULT "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hudrectrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2DRect(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture3D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * textureCube(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

hudhalo = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        uniform vec3 camera;
        uniform mat4 linearworldmatrix;
        uniform vec4 halodilate;
        uniform vec3 haloparams;
        uniform vec2 haloscale;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(gfetchdefs [earlydepth])

        fragdata(0) vec4 fragcolor;
       
        void main(void)
        {
            float blend = 0.0;
            vec4 srccolor = vec4(0.0), dstcolor = vec4(0.0);
            int size = int(halodilate.x);

            for(int i = -size; i <= size; ++i)
            {
                for(int j = -size; j <= size; ++j)
                {
                    vec2 curcoord = vec2(i + i * halodilate.y, j + j * halodilate.y);
                    float curdist = distance(curcoord, vec2(0, 0));
                    if(curdist > halodilate.z) continue;

                    vec4 curcolor = texture2DRect(tex0, gl_FragCoord.xy * haloscale + curcoord * haloscale + vec2(i * 0.5, j * 0.5));
                    if(i == 0 && j == 0) srccolor = curcolor;
                    
                    float curblend = 1.0 - clamp(max(curdist - 1.0, 0.0) * halodilate.w, 0.0, 1.0);
                    if(curcolor.a > dstcolor.a || (curcolor.a == dstcolor.a && curblend > blend))
                    {
                        dstcolor = curcolor;
                        blend = curblend;
                    }
                }
            }

            if(dstcolor.a <= 0.0 || blend <= 0.0) discard;

            // convert alpha back to distance
            float alpha = dstcolor.a, dist = (1.0 - alpha) * haloparams.z;

            // extract the depth information from the scene
            vec2 duv = gl_FragCoord.xy * haloparams.xy;

            @(gdepthunpack depth [gfetch(earlydepth, duv)] [
                vec3 pos = (linearworldmatrix * vec4(depth*duv, depth, 1.0)).xyz;
            ] [
                vec4 pos = linearworldmatrix * vec4(duv, depth, 1.0);
                pos.xyz /= pos.w;
            ])
            float maxdist = distance(camera, pos.xyz); // linearize and calculate distance

            // depth test and discard if it fails
            @(if (>= (strstr $arg1 "depth") 0) [result [
                if(dist > maxdist) discard;
            ]])

            if(alpha == srccolor.a)
            {   // no change in source pixel distance, must be infill
                @(if (>= (strstr $arg1 "depth") 0) [result [
                    discard;
                ]] [result [
                    if(dist > maxdist)
                    { // behind something, draw infill
                        @(if (>f $haloinfillmix 0.0) [result [
                            dstcolor = mix(dstcolor, srccolor, @[haloinfillmix]);
                        ]])
                        dstcolor *= vec4(vec3(@[haloinfillcol]), @[haloinfillblend]);
                    }
                    else discard;
                ]])
            }
            else dstcolor = vec4(dstcolor.rgb * blend * 2.0, dstcolor.a * blend);
            
            fragcolor = dstcolor * colorscale;
        }
    ]
]

hudhalo "hudhalodepth"
hudhalo "hudhalotop"

hudglass = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
        }
    ] [
        uniform sampler2DRect tex0, tex1, tex2, tex3, tex4, tex5;
        uniform vec4 glassmix, glasssize;
        uniform vec3 glassfx;
        uniform vec2 glassworld, glassscale;
        varying vec2 texcoord0;

        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 glassparams;
        ])

        @(? (>= (strstr $arg1 "focus") 0) [
            uniform sampler2D tex6;
            uniform vec4 glassfocusclamp;
            uniform vec3 glassfocusfield, camera;
            uniform vec2 glassdepth;
            uniform mat4 linearworldmatrix;

            @(gfetchdefs [earlydepth])
        ])

        uniform float time;

        fragdata(0) vec4 fragcolor;

        void main(void)
        {
            float glassamt = texture2DRect(tex0, texcoord0).a;
            
            if(glassamt < 1.0)
            {
                glassamt = max(glassamt, texture2DRect(tex1, texcoord0 * glassworld).a);

                if(glassamt < 1.0)
                {
                    vec2 uv = texcoord0;
                    @(if (>= (strstr $arg1 "view") 0) [result [
                        // WARNING: This program MUST produce the same
                        // results as the engine 'visorsurf.coords()' for cursor projection

                        uv *= glasssize.zw;

                        uv -= vec2(0.5);
                        uv *= glassparams.zw;

                        float l = length(uv);
                        uv.xy *= (1.0 + glassparams.x * glassparams.y * glassparams.y);
                        uv.xy /= (1.0 + glassparams.x + l * l);

                        uv += vec2(0.5);

                        uv *= glasssize.xy;
                    ]])
                    glassamt = max(glassamt, texture2DRect(tex2, uv).a);

                    if(glassamt < 1.0) glassamt = max(glassamt, texture2DRect(tex3, texcoord0).a);
                }
            }
            
            glassamt = clamp(glassamt * glassmix.z, glassmix.x, glassmix.y);

            vec3 outcolor = texture2DRect(tex4, texcoord0).rgb;
            vec2 cuv = texcoord0 * glasssize.zw * 2.0 - 1.0;
            float dist = glassfx.z > 0.0 ? distance(vec2(0.0), cuv) * glassfx.z : 1.0;
          
            if(dist > 0.0)
            {
                @(if (>= (strstr $arg1 "focus") 0) [result [
                    if(glassamt < 1.0)
                    {
                        vec2 curduv = gl_FragCoord.xy * glassdepth;
                        @(gdepthunpack curdepth [gfetch(earlydepth, curduv)] [
                            vec3 curpos = (linearworldmatrix * vec4(curdepth*curduv, curdepth, 1.0)).xyz;
                        ] [
                            vec4 curpos = linearworldmatrix * vec4(curduv, curdepth, 1.0);
                            curpos.xyz /= curpos.w;
                        ])
                        
                        if(distance(camera, curpos.xyz) >= glassfocusfield.z)
                        {
                            @(gdepthunpack focusdepth [texture2D(tex6, vec2(0.5))] [
                                vec3 focuspos = (linearworldmatrix * vec4(focusdepth*curduv, focusdepth, 1.0)).xyz;
                            ] [
                                vec4 focuspos = linearworldmatrix * vec4(curduv, focusdepth, 1.0);
                                focuspos.xyz /= focuspos.w;
                            ])

                            float focusdist = distance(camera, focuspos.xyz), curdist = distance(focuspos.xyz, curpos.xyz),
                                curoffset = abs(curdist - glassfocusfield.x);
                        
                            if(curdist > focusdist)
                                glassamt += clamp(curoffset * glassfocusfield.y * dist, glassfocusclamp.x, glassfocusclamp.y);
                            else
                                glassamt += clamp(curoffset * glassfocusfield.y * dist, glassfocusclamp.z, glassfocusclamp.w);
                        }
                    }
                ]])

                if(glassamt < 1.0 && glassmix.w > 0.0) glassamt += (glassmix.w * dist) * (1.0 - glassamt);
            }

            if(glassamt > 0.0)
                outcolor = mix(outcolor, texture2DRect(tex5, texcoord0 * glassscale).rgb, clamp(glassamt, 0.0, 1.0));

            if(dist > 0.0)
            {
                if(glassfx.y > 1.0)
                    outcolor = mix(outcolor, outcolor * glassfx.y, clamp(glassfx.x * dist, 0.0, 1.0));
                else if(glassfx.y < 1.0)
                    outcolor = mix(outcolor, vec3(dot(outcolor, vec3(0.3, 0.59, 0.11))), clamp(glassfx.x * dist, 0.0, 1.0) * (1.0 - glassfx.y));
            }

            fragcolor = vec4(outcolor, 1.0);
        }
    ]
]

hudglass "hudglass"
hudglass "hudglassview"
hudglass "hudglassfocus"
hudglass "hudglassviewfocus"

hudvisor = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        uniform float time;
        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 visorparams;
        ])
        @(? (>= (strstr $arg1 "chroma") 0) [
            uniform vec3 visorchroma;
        ])
        uniform vec4 visorsize;
        uniform vec4 visorfx, visorfxcol;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        fragdata(0) vec4 fragcolor;

        uint hash(uint x)
        {
            x += (x << 10u);
            x ^= (x >>  6u);
            x += (x <<  3u);
            x ^= (x >> 11u);
            x += (x << 15u);

            return x;
        }

        float hash(float x) { return uintBitsToFloat(hash(floatBitsToUint(x))); }

        void main(void)
        {
            vec2 uv = texcoord0.xy;
            vec4 diffuse = vec4(0.0);

            @(if (>= (strstr $arg1 "view") 0) [result [
                // WARNING: This program MUST produce the same
                // results as the engine 'visorsurf.coords()' for cursor projection

                uv *= visorsize.zw;

                uv -= vec2(0.5);
                uv *= visorparams.zw;

                float l = length(uv);
                uv.xy *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
                uv.xy /= (1.0 + visorparams.x + l * l);

                uv += vec2(0.5);

                uv *= visorsize.xy;
            ]])

            @(? (>= (strstr $arg1 "chroma") 0) [
                float cd = clamp(distance(vec2(0.0), vec2(uv * visorsize.zw * 2.0 - 1.0)), visorchroma.x, visorchroma.y) * visorsize.x;
                vec2 cs = vec2(cd * visorchroma.z, 0.0);

                vec2 cr = texture2DRect(tex0, uv + cs).ra;
                vec2 cb = texture2DRect(tex0, uv - cs).ba;
                vec2 cg = texture2DRect(tex0, uv).ga;

                diffuse = vec4(cr.x, cg.x, cb.x, cr.y * 0.33 + cg.y * 0.34 + cb.y * 0.33);
            ] [
                diffuse = texture2DRect(tex0, uv);
            ])

            if(diffuse.a == 0.0) discard;

            if(visorfx.x > 0.0 && visorfx.y > 0.0) // scanlines
            {
                float count = visorsize.y * visorfx.x, ycoord = 0.5 + (uv.y * visorsize.w * 0.5);
                vec2 sl = vec2(sin(ycoord * count), cos(ycoord * count));
                vec3 scanlines = mix(vec3(sl.x, sl.y, sl.x), visorfxcol.rgb, visorfxcol.a);

                diffuse.rgb += diffuse.rgb * scanlines * visorfx.y;
            }

            if(visorfx.z > 0.0) // noise
            {
                vec2 uvscaled = uv * visorsize.zw;
                float noise = clamp(hash(uvscaled.x + uvscaled.y + (int(time*10)&255)), 0.5, 1.0);
                diffuse.rgb += diffuse.rgb * vec3(noise) * visorfx.z;
            }

            if(visorfx.w > 0.0) // flicker
                diffuse.rgb += diffuse.rgb * sin(110.0 * time) * visorfx.w;

            fragcolor = colorscale * diffuse;
        }
    ]
]

hudvisor "hudvisor"
hudvisor "hudvisorchroma"
hudvisor "hudvisorview"
hudvisor "hudvisorviewchroma"

hudfocus = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        uniform mat4 hudmatrix;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
        }
    ] [
        uniform sampler2D tex0;
        @(? (>= (strstr $arg1 "tex") 0) [
            uniform vec3 focusparams;
            @(gfetchdefs [earlydepth])
        ] [
            uniform vec4 focusparams;
            @(gdepthunpackparams)
        ])
        uniform vec2 focussize;
        @(ginterpdepth)

        fragdata(0) vec4 fragcolor;

        void main(void)
        {
            if(focusparams.y > 0.0)
            {
                @(if (>= (strstr $arg1 "tex") 0) [result [
                    @(gdepthunpack curdepth [gfetch(earlydepth, focussize)])
                ]] [result [
                    float curdepth = focusparams.w;
                ]])
                @(gdepthunpack prvdepth [texture2D(tex0, vec2(0.5))])

                if(curdepth != prvdepth)
                {
                    float amtdepth = focusparams.x;

                    if(focusparams.y > 0.0)
                        amtdepth *= abs(curdepth - prvdepth) * focusparams.z;

                    if(curdepth > prvdepth)
                    {
                        if((prvdepth += amtdepth) > curdepth) prvdepth = curdepth;
                    }
                    else if((prvdepth -= amtdepth) < curdepth) prvdepth = curdepth;

                    curdepth = prvdepth;
                }

                @(gpackdepth outdepth curdepth)
                fragcolor = vec4(outdepth, 0.0);
            }
            else
            {
                @(if (>= (strstr $arg1 "tex") 0) [result [
                    fragcolor = texture2D(tex0, vec2(0.5));
                ]] [result [
                    @(gpackdepth outdepth focusparams.w)
                    fragcolor = vec4(outdepth, 0.0);
                ]])
            }
        }
    ]
]

hudfocus "hudfocus"
hudfocus "hudfocustex"
