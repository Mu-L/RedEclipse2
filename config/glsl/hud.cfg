///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader $SHADER_DEFAULT "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hudrectrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2DRect(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture3D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * textureCube(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

hudhalo = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        uniform vec3 camera;
        uniform mat4 linearworldmatrix;
        uniform vec4 halodilate;
        uniform vec3 haloparams;
        uniform vec2 haloscale;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(gfetchdefs [earlydepth])

        fragdata(0) vec4 fragcolor;
       
        void main(void)
        {
            float blend = 0.0;
            vec4 srccolor = vec4(0.0), dstcolor = vec4(0.0);
            int size = int(halodilate.x);

            for(int i = -size; i <= size; ++i)
            {
                for(int j = -size; j <= size; ++j)
                {
                    vec2 curcoord = vec2(i + i * halodilate.y, j + j * halodilate.y);
                    float curdist = distance(curcoord, vec2(0, 0));
                    if(curdist > halodilate.z) continue;

                    vec4 curcolor = texture2DRect(tex0, gl_FragCoord.xy * haloscale + curcoord * haloscale + vec2(i * 0.5, j * 0.5));
                    if(i == 0 && j == 0) srccolor = curcolor;
                    
                    float curblend = 1.0 - clamp(max(curdist - 1.0, 0.0) * halodilate.w, 0.0, 1.0);
                    if(curcolor.a > dstcolor.a || (curcolor.a == dstcolor.a && curblend > blend))
                    {
                        dstcolor = curcolor;
                        blend = curblend;
                    }
                }
            }

            if(dstcolor.a <= 0.0 || blend <= 0.0) discard;

            // convert alpha back to distance
            float alpha = dstcolor.a, dist = (1.0 - alpha) * haloparams.z;

            // extract the depth information from the scene
            vec2 duv = gl_FragCoord.xy * haloparams.xy;
            float depth = dot(gfetch(earlydepth, duv).rgb, gdepthunpackparams);
            vec3 pos = (linearworldmatrix * vec4(depth * gl_FragCoord.xy, depth, 1.0)).xyz;
            float maxdist = distance(camera, pos); // linearize and calculate distance

            // depth test and discard if it fails
            @(if (>= (strstr $arg1 "depth") 0) [result [
                if(dist > maxdist) discard;
            ]])

            if(alpha == srccolor.a)
            {   // no change in source pixel distance, must be infill
                @(if (>= (strstr $arg1 "depth") 0) [result [
                    discard;
                ]] [result [
                    if(dist > maxdist)
                    { // behind something, draw infill
                        @(if (>f $haloinfillmix 0.0) [result [
                            dstcolor = mix(dstcolor, srccolor, @[haloinfillmix]);
                        ]])
                        dstcolor *= vec4(vec3(@[haloinfillcol]), @[haloinfillblend]);
                    }
                    else discard;
                ]])
            }
            else dstcolor = vec4(dstcolor.rgb * blend * 2.0, dstcolor.a * blend);
            
            fragcolor = dstcolor * colorscale;
        }
    ]
]

hudhalo "hudhalodepth"
hudhalo "hudhalotop"

shader $SHADER_DEFAULT "hudvisor" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    uniform vec4 visorparams, visorsize;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        // WARNING: This program MUST produce the same
        // results as the engine 'visorsurf.coords()' for cursor projection

        vec2 uv = texcoord0.xy;

        uv *= visorsize.zw;

        uv -= vec2(0.5);
        uv *= visorparams.zw;

        float l = length(uv);
        uv.xy *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
        uv.xy /= (1.0 + visorparams.x + l * l);

        uv += vec2(0.5);

        uv *= visorsize.xy;

        vec4 diffuse = texture2DRect(tex0, uv);

        if(diffuse.a <= 0.0) discard;

        fragcolor = diffuse * colorscale;
    }
]

shader $SHADER_DEFAULT "hudglass" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
    }
] [
    uniform sampler2DRect tex0, tex1, tex2;
    uniform vec4 glassmix, glasssize;
    uniform vec2 glassparams; // x = narrow, y = saturate
    uniform vec2 glassscale;
    varying vec2 texcoord0;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec3 outcolor = texture2DRect(tex1, texcoord0).rgb;
        vec2 cuv = texcoord0 * glasssize.zw * 2.0 - 1.0;
        float dist = glassparams.x > 0.0 ? clamp(distance(vec2(0.0), cuv) * glassparams.x, 0.0, 1.0) : 1.0,
              glassamt = clamp(texture2DRect(tex0, texcoord0).a * glassmix.z, glassmix.x, glassmix.y);
        
        if(dist > 0.0 && glassamt < 1.0 && glassmix.w > 0.0) glassamt += (glassmix.w * dist) * (1.0 - glassamt);

        if(glassamt > 0.0)
            outcolor = mix(outcolor, texture2DRect(tex2, texcoord0 * glassscale).rgb, clamp(glassamt, 0.0, 1.0));

        if(dist > 0.0)
        {
            if(glassparams.y > 1.0)
                outcolor = mix(outcolor, outcolor * glassparams.y, dist);
            else if(glassparams.y < 1.0)
                outcolor = mix(outcolor, vec3(dot(outcolor, vec3(0.3, 0.59, 0.11))), dist * (1.0 - glassparams.y));
        }

        fragcolor = vec4(outcolor, 1.0);
    }
]

shader $SHADER_DEFAULT "hudrender" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform float time;
    uniform sampler2DRect tex0;
    uniform vec4 rendersize;
    uniform vec3 renderparams; // x = chroma, y = glitch, z = saturate
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 diffuse = vec4(0.0);
        vec2 cuv = texcoord0 * rendersize.zw * 2.0 - 1.0;
        float dist = clamp(distance(vec2(0.0), cuv), 0.0, 1.0);

        if(dist > 0.0)
        {
            if(renderparams.x > 0.0) 
            {
                vec2 cs = cuv * renderparams.x,
                     cr = texture2DRect(tex0, texcoord0 - cs).ra,
                     cb = texture2DRect(tex0, texcoord0 + cs).ba,
                     cg = texture2DRect(tex0, texcoord0).ga;
                diffuse = vec4(cr.x, cg.x, cb.x, cr.y * 0.33 + cg.y * 0.34 + cb.y * 0.33);
            }
            else diffuse = texture2DRect(tex0, texcoord0);

            if(renderparams.y > 0.0)
            {
                float offset = clamp(renderparams.y * dist, 0.0, 1.0),
                      jitter = (fract(sin(texcoord0.y * 0.03 + time) * 10000.0) - 0.5) * offset * 0.0025 * rendersize.x;
                diffuse.rgb = mix(diffuse.rgb, texture2DRect(tex0, texcoord0 + vec2(jitter, 0.0)).rgb, offset * 0.5);
            }

            if(diffuse.a <= 0.0) discard;

            if(renderparams.z > 1.0)
                diffuse.rgb = mix(diffuse.rgb, diffuse.rgb * renderparams.z, dist);
            else if(renderparams.z < 1.0)
                diffuse.rgb = mix(diffuse.rgb, vec3(dot(diffuse.rgb, vec3(0.3, 0.59, 0.11))), dist * (1.0 - renderparams.z));
        }
        else diffuse = texture2DRect(tex0, texcoord0);
        
        if(diffuse.a <= 0.0) discard;
        
        fragcolor = colorscale * diffuse;
    }
]
