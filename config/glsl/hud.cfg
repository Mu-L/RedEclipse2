///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader $SHADER_DEFAULT "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hudrectrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2DRect(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture3D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * textureCube(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudhalobuild" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
    }
] [
    uniform sampler2DRect tex0, tex1;
    uniform vec3 camera;
    uniform mat4 linearworldmatrix;
    uniform vec3 haloparams;
    varying vec2 texcoord0;

    @(gfetchdefs [earlydepth])

    fragdata(0) vec4 fragcolor;
    
    void main(void)
    {
        vec4 outcolor = texture2DRect(tex1, texcoord0);
        if(outcolor.a <= 0.0)
        {
            outcolor = texture2DRect(tex0, texcoord0);
            if(outcolor.a <= 0.0) discard;

            vec2 duv = gl_FragCoord.xy * haloparams.xy;
            float depth = dot(gfetch(earlydepth, duv).rgb, gdepthunpackparams);
            vec3 pos = (linearworldmatrix * vec4(depth * gl_FragCoord.xy, depth, 1.0)).xyz;
            if((1.0 - outcolor.a) * haloparams.z > distance(camera, pos)) discard;
        }

        fragcolor = outcolor;
    }
]

shader $SHADER_DEFAULT "hudhalobuild" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
    }
] [
    uniform sampler2DRect tex0, tex1;
    uniform vec3 camera;
    uniform mat4 linearworldmatrix;
    uniform vec3 haloparams;
    varying vec2 texcoord0;

    @(gfetchdefs [earlydepth])

    fragdata(0) vec4 fragcolor;
    
    void main(void)
    {
        vec4 outcolor = texture2DRect(tex1, texcoord0);
        if(outcolor.a <= 0.0)
        {
            outcolor = texture2DRect(tex0, texcoord0);
            if(outcolor.a <= 0.0) discard;

            vec2 duv = gl_FragCoord.xy * haloparams.xy;
            float depth = dot(gfetch(earlydepth, duv).rgb, gdepthunpackparams);
            vec3 pos = (linearworldmatrix * vec4(depth * gl_FragCoord.xy, depth, 1.0)).xyz;
            if((1.0 - outcolor.a) * haloparams.z > distance(camera, pos)) discard;
        }

        fragcolor = outcolor;
    }
]

shader $SHADER_DEFAULT "hudhalodraw" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0, tex1;
    uniform vec3 camera;
    uniform mat4 linearworldmatrix;
    uniform vec4 haloparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    @(gfetchdefs [earlydepth])

    fragdata(0) vec4 fragcolor;
    
    void main(void)
    {
        vec4 outcolor = texture2DRect(tex0, texcoord0);
        if(outcolor.a <= 0.0) discard;

        vec4 srccolor = texture2DRect(tex1, texcoord0);
        if(srccolor.a > 0.0)
        {
            vec2 duv = gl_FragCoord.xy * haloparams.xy;
            float depth = dot(gfetch(earlydepth, duv).rgb, gdepthunpackparams);
            vec3 pos = (linearworldmatrix * vec4(depth * gl_FragCoord.xy, depth, 1.0)).xyz;
            if((1.0 - srccolor.a) * haloparams.z < distance(camera, pos)) discard;
            outcolor = srccolor;
            outcolor *= 0.75;
            outcolor.a *= 0.5;
        }
        else outcolor.rgb *= haloparams.w;

        fragcolor = outcolor * colorscale;
    }
] 1

shader $SHADER_DEFAULT "hudvisor" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    uniform vec4 visorparams, visorsize;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        // WARNING: This program MUST produce the same
        // results as the engine 'visorsurf.coords()' for cursor projection

        vec2 uv = texcoord0.xy;

        uv *= visorsize.zw;

        uv -= vec2(0.5);
        uv *= visorparams.zw;

        float l = length(uv);
        uv.xy *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
        uv.xy /= (1.0 + visorparams.x + l * l);

        uv += vec2(0.5);

        uv *= visorsize.xy;

        vec4 diffuse = texture2DRect(tex0, uv);

        if(diffuse.a <= 0.0) discard;

        fragcolor = diffuse * colorscale;
    }
]

hudblit = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
        }
    ] [
        uniform float visortime;
        uniform vec4 blitsize;
        uniform sampler2DRect tex0;

        @(if (>= (strstr $arg1 "glass") 0) [result [
            uniform sampler2DRect tex1, tex2;
            uniform vec4 blitglass;
            uniform vec2 blitscale;
            #define blittex tex1
        ]] [result [
            #define blittex tex0
        ]])
        uniform vec4 blitparams; // x = chroma, y = glitch, z = saturate, w = narrow
        varying vec2 texcoord0;

        fragdata(0) vec4 fragcolor;

        void main(void)
        {
            vec3 outcolor = vec3(0.0);

            vec2 cuv = texcoord0 * blitsize.zw * 2.0 - 1.0;
            float dist = blitparams.w > 0.0 ? clamp(distance(vec2(0.0), cuv) * blitparams.w, 0.0, 1.0) : 1.0;

            if(dist > 0.0)
            {
                if(blitparams.x > 0.0)
                {
                    vec2 cs = cuv * blitparams.x;
                    outcolor.r = texture2DRect(blittex, texcoord0 - cs).r;
                    outcolor.g = texture2DRect(blittex, texcoord0).g;
                    outcolor.b = texture2DRect(blittex, texcoord0 + cs).b;
                }
                else outcolor = texture2DRect(blittex, texcoord0).rgb;

                if(blitparams.y > 0.0)
                {
                    float offset = clamp(blitparams.y * dist, 0.0, 1.0),
                        jitter = (fract(sin(texcoord0.y * 0.05 + visortime) * 5000.0) - 0.5) * offset * 0.005 * blitsize.x;
                    outcolor.rgb = mix(outcolor.rgb, texture2DRect(blittex, texcoord0 + vec2(jitter, 0.0)).rgb, offset * 0.75);
                }
            }
            else outcolor = texture2DRect(blittex, texcoord0).rgb;

            @(if (>= (strstr $arg1 "glass") 0) [result [
                float blitamt = clamp(texture2DRect(tex0, texcoord0).a * blitglass.z, blitglass.x, blitglass.y);

                if(dist > 0.0 && blitamt < 1.0 && blitglass.w > 0.0) blitamt += (blitglass.w * dist) * (1.0 - blitamt);
                if(blitamt > 0.0)
                {
                    vec3 glasscolor = vec3(0.0);
                    vec2 glasscuv = texcoord0 * blitscale;

                    if(dist > 0.0)
                    {
                        if(blitparams.x > 0.0)
                        {
                            vec2 cs = cuv * blitscale * blitparams.x;
                            glasscolor.r = texture2DRect(tex2, glasscuv - cs).r;
                            glasscolor.g = texture2DRect(tex2, glasscuv).g;
                            glasscolor.b = texture2DRect(tex2, glasscuv + cs).b;
                        }
                        else glasscolor = texture2DRect(tex2, glasscuv).rgb;

                        if(blitparams.y > 0.0)
                        {
                            float offset = clamp(blitparams.y * dist, 0.0, 1.0),
                                jitter = (fract(sin(glasscuv.y * 0.05 + visortime) * 5000.0) - 0.5) * offset * 0.005 * blitsize.x * blitscale.x;
                            glasscolor.rgb = mix(glasscolor.rgb, texture2DRect(tex2, glasscuv + vec2(jitter, 0.0)).rgb, offset * 0.75);
                        }
                    }
                    else glasscolor = texture2DRect(tex2, glasscuv).rgb;

                    outcolor = mix(outcolor, glasscolor, clamp(blitamt, 0.0, 1.0));
                }
            ]])

            if(dist > 0.0)
            {
                if(blitparams.z > 1.0)
                    outcolor = mix(outcolor, outcolor * blitparams.z, dist);
                else if(blitparams.z < 1.0)
                    outcolor = mix(outcolor, vec3(dot(outcolor, vec3(0.3, 0.59, 0.11))), dist * (1.0 - blitparams.z));
            }

            fragcolor = vec4(outcolor, 1.0);
        }
    ]
]
hudblit "hudblit"
hudblit "hudblitglass"

shader $SHADER_DEFAULT "hudrender" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform float visortime;
    uniform sampler2DRect tex0;
    uniform vec4 rendersize;
    uniform vec4 renderparams; // x = chroma, y = glitch, z = saturate, w = narrow
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 outcolor = vec4(0.0);
        vec2 cuv = texcoord0 * rendersize.zw * 2.0 - 1.0;
        float dist = renderparams.w > 0.0 ? clamp(distance(vec2(0.0), cuv) * renderparams.w, 0.0, 1.0) : 1.0;

        if(dist > 0.0)
        {
            if(renderparams.x > 0.0) 
            {
                vec2 cs = cuv * renderparams.x,
                     cr = texture2DRect(tex0, texcoord0 - cs).ra,
                     cb = texture2DRect(tex0, texcoord0 + cs).ba,
                     cg = texture2DRect(tex0, texcoord0).ga;
                outcolor = vec4(cr.x, cg.x, cb.x, cr.y * 0.33 + cg.y * 0.34 + cb.y * 0.33);
            }
            else outcolor = texture2DRect(tex0, texcoord0);

            if(renderparams.y > 0.0)
            {
                float offset = clamp(renderparams.y * dist, 0.0, 1.0),
                      jitter = (fract(sin(texcoord0.y * 0.05 + visortime) * 5000.0) - 0.5) * offset * 0.005 * rendersize.x;
                outcolor.rgb = mix(outcolor.rgb, texture2DRect(tex0, texcoord0 + vec2(jitter, 0.0)).rgb, offset * 0.75);
            }

            if(outcolor.a <= 0.0) discard;

            if(renderparams.z > 1.0)
                outcolor.rgb = mix(outcolor.rgb, outcolor.rgb * renderparams.z, dist);
            else if(renderparams.z < 1.0)
                outcolor.rgb = mix(outcolor.rgb, vec3(dot(outcolor.rgb, vec3(0.3, 0.59, 0.11))), dist * (1.0 - renderparams.z));
        }
        else outcolor = texture2DRect(tex0, texcoord0);
        
        if(outcolor.a <= 0.0) discard;
        
        fragcolor = colorscale * outcolor;
    }
]
