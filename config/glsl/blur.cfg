blurshader = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        @(screentexcoord 0)
        uniform float offsets[@@(+ $arg2 1)];
        varying vec2 texcoord0, texcoordp1, texcoordn1;
        
        @(loopconcat+ i 2 (min (- $arg2 1) 2) [result [
            varying vec2 texcoordp@i, texcoordn@i;
        ]])
        
        void main(void)
        {
            gl_Position = vvertex;
            texcoord0 = vtexcoord0;
            
            vec2 tcp = vtexcoord0, tcn = vtexcoord0;
            tcp.@arg3 += offsets[1];
            tcn.@arg3 -= offsets[1];
            texcoordp1 = tcp;
            texcoordn1 = tcn;
            
            @(loopconcat+ i 2 (min (- $arg2 1) 2) [result [
                tcp.@arg3 = vtexcoord0.@arg3 + offsets[@@i];
                tcn.@arg3 = vtexcoord0.@arg3 - offsets[@@i];
                texcoordp@i = tcp;
                texcoordn@i = tcn;
            ]])
        }
    ] [
        uniform float weights[@@(+ $arg2 1)];
        uniform float offsets[@@(+ $arg2 1)];
        uniform sampler@[arg4] tex0;
        varying vec2 texcoord0, texcoordp1, texcoordn1;
        
        @(loopconcat+ i 2 (min (- $arg2 1) 2) [result [
            varying vec2 texcoordp@i, texcoordn@i;
        ]])
        
        fragdata(0) vec4 fragcolor;
        
        void main(void)
        {
            #define texval(sampler, coords) texture@[arg4](sampler, (coords))

            vec4 srccolor = texval(tex0, texcoord0);
            
            @(if (>= (strstr $arg1 "alpha") 0) [result [
                vec4 samplep, samplen;
                vec4 val = srccolor * weights[0] * srccolor.a;
                float total = weights[0] * srccolor.a, maxsource = dot(srccolor.rgb, vec3(@lumweights));                

                @(loopconcat+ i 1 $arg2 [
                    if (< $i 4) [result [
                        samplep = texval(tex0, texcoordp@i);
                        samplen = texval(tex0, texcoordn@i);
                        
                        if(samplep.a > 0.0)
                        {
                            val.rgb += samplep.rgb * weights[@@i] * samplep.a;
                            val.a += samplep.a * weights[@@i];
                            total += weights[@@i] * samplep.a;
                            maxsource = max(maxsource, dot(samplep.rgb, vec3(@lumweights)));
                        }
                        if(samplen.a > 0.0)
                        {
                            val.rgb += samplen.rgb * weights[@@i] * samplen.a;
                            val.a += samplen.a * weights[@@i];
                            total += weights[@@i] * samplen.a;
                            maxsource = max(maxsource, dot(samplen.rgb, vec3(@lumweights)));
                        }
                    ]] [result [
                        @(if (=s $arg3 "x") [result [
                            samplep = texval(tex0, vec2(texcoord0.x + offsets[@@i], texcoord0.y));
                            samplen = texval(tex0, vec2(texcoord0.x - offsets[@@i], texcoord0.y));
                        ]] [result [
                            samplep = texval(tex0, vec2(texcoord0.x, texcoord0.y + offsets[@@i]));
                            samplen = texval(tex0, vec2(texcoord0.x, texcoord0.y - offsets[@@i]));
                        ]])
                        
                        if(samplep.a > 0.0)
                        {
                            val.rgb += samplep.rgb * weights[@@i] * samplep.a;
                            val.a += samplep.a * weights[@@i];
                            total += weights[@@i] * samplep.a;
                            maxsource = max(maxsource, dot(samplep.rgb, vec3(@lumweights)));
                        }
                        if(samplen.a > 0.0)
                        {
                            val.rgb += samplen.rgb * weights[@@i] * samplen.a;
                            val.a += samplen.a * weights[@@i];
                            total += weights[@@i] * samplen.a;
                            maxsource = max(maxsource, dot(samplen.rgb, vec3(@lumweights)));
                        }
                    ]]
                ])
                
                if(total > 0.0) val.rgb /= total;
                float outputbright = dot(val.rgb, vec3(@lumweights));
                if(outputbright > maxsource && outputbright > 0.0) val.rgb *= maxsource / outputbright;
            ]] [result [
                vec4 val = srccolor * weights[0];
                @(loopconcat+ i 1 $arg2 [
                    if (< $i 4) [result [
                        val += weights[@@i] * (texval(tex0, texcoordp@i) + texval(tex0, texcoordn@i));
                    ]] [result [
                        val += weights[@@i] *
                        @(if (=s $arg3 "x") [result [
                            (texval(tex0, vec2(texcoord0.x + offsets[@@i], texcoord0.y)) + texval(tex0, vec2(texcoord0.x - offsets[@@i], texcoord0.y)));
                        ]] [result [
                            (texval(tex0, vec2(texcoord0.x, texcoord0.y + offsets[@@i])) + texval(tex0, vec2(texcoord0.x, texcoord0.y - offsets[@@i])));
                        ]])
                    ]]
                ])
            ]])
            
            fragcolor = val;
        }
    ]
]

loop+ i 1 $MAXBLURRADIUS [
    blurshader (format "blurx%1" $i) $i x 2D
    blurshader (format "blury%1" $i) $i y 2D
    blurshader (format "blurx%1rect" $i) $i x 2DRect
    blurshader (format "blury%1rect" $i) $i y 2DRect
    blurshader (format "bluralphax%1" $i) $i x 2D
    blurshader (format "bluralphay%1" $i) $i y 2D
    blurshader (format "bluralphax%1rect" $i) $i x 2DRect
    blurshader (format "bluralphay%1rect" $i) $i y 2DRect
]
